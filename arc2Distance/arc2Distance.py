### Description: this script read in .arc file generated by Gulp
###              and calculate the distance betweent Zr-Ni for every
###              frame.
### Usage: python arc2Distance.py file.arc
### code by zmzeng12 20180202


#coding:utf-8
import re, math, sys
file2Process = sys.argv[1]
file = open(file2Process, 'r')
line = file.readline()
print('\nThe file to process is ' + file2Process +'\n')

listOfTime = []
listOfZr = []
listOfNi = []
listOfDistance = []

# get all Time and Zr, Ni coordinate in list
print('Read file...'+'\n')
while line:
    if line.find('ps')!=-1:
        listOfTime.append(line.split()[0])
    elif line.find('ZR1')!=-1: 
        listOfZr.append(line.split()[1:4])
    elif line.find('NI1')!=-1:
        listOfNi.append(line.split()[1:4])
    line = file.readline()
file.close()
print('Number of frames:' + str(len(listOfNi)))

# difine distance Calculator
def distanceCal(atom1, atom2):
    # get distance 
    d1 = math.pow(float(atom2[0]) - float(atom1[0]), 2)
    d2 = math.pow(float(atom2[1]) - float(atom1[1]), 2)
    d3 = math.pow(float(atom2[2]) - float(atom1[2]), 2)
    return str(math.sqrt(d1 + d2 + d3))


# get the distance between Ni and the first Zr atom
# There are 12 Zr and 1 Ni atoms in the structure of every time step
print('Calculating distance'+'\n')
listOfDistance.append(distanceCal(listOfZr[0], listOfNi[0]))
i=1
while i < len(listOfTime):
    distance = distanceCal(listOfZr[i+11], listOfNi[i])
    listOfDistance.append(distance)
    i += 1

# output all data
file = open(file2Process[0:-4] + '_Result.txt', 'w')
file.write('Time    Distance(Ni-Zr)\n')
for time, distance in zip(listOfTime, listOfDistance):
    file.write(time + '    ' + distance + '\n')
file.close()

print('all done!\n')