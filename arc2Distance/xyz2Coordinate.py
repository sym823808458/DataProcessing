# -*- coding: utf-8 -*-
"""Description: 
This script read in .xyz file generated by Lammps
and output the coordinate of the specific atom for every frame.

Usage: 
        $ python xyz2Coordinate.py file.xyz steptime atom

Args:
    filename (str): define which file to process.
    steptime (int, optional): define how much time in a step. default is 1000step/ps.
    atom (str, optional): atom type to ouput, default is Ni.

code by zmzeng12 20180308
"""

import re, math, sys

class xyz2Coordinate(object):

    def __init__(self, pyname, file2Process, step2time=1000, atom='Ni'):
        """
        Args:
            file2Process (str): define which file to process.
            step2time (int, optional): define how much time in a step. default is 1000step/ps.
            atom (str, optional): atom type to ouput, default is Ni.
        Attributes:
            self.file2Process (str): define which file to process.
            self.step2time (int): define how much time in a step. default is 1000step/ps.
            self.atom (str): atom type to ouput, default is Ni.
            self.listOfTime (list)ï¼šlist of all time data.
            self.listOfatom (list): list of coordinate of atom.

        """
        print('\n------>  ' + 'The file to process is ' + file2Process )
        print('------>  ' + 'step of time is set to ' + str(step2time))
        print('------>  ' + 'atom is set to ' + atom +'\n')
        self.file2Process = file2Process;
        self.listOfTime = []
        self.listOfatom = []
        self.step2time = step2time
        self.atom = atom

    # get all Time and Zr, Ni coordinate in list
    def readFile(self):
        file = open(self.file2Process, 'r')
        line = file.readline()
        while line:
            if line.find('Timestep')!=-1:
                Timestep = int(line.split()[2])
                # convert timestep to time
                self.listOfTime.append(str(Timestep/int(self.step2time)))
            elif line.find(self.atom)!=-1: 
                self.listOfatom.append(line.split()[1:4])
            line = file.readline()
        file.close()
        print('\n------>  ' + 'Number of frames:' + str(len(self.listOfTime)) +'\n')
        print('------>  ' + 'Number of '+ self.atom + ':' + str(len(self.listOfatom)) +'\n')

    def coordinate2str(self, list):
        str = ''
        for i in list:
            str += i + '   '
        return str 

    # output all data
    def outputData(self):
        file = open(self.file2Process[0:-4] + '_Result.txt', 'w')
        file.write('Time (ps)    Coordinate (self.atom) (A)\n')
        for time, coordinate in zip(self.listOfTime, self.listOfatom):
            file.write(time + '    ' + self.coordinate2str(coordinate) + '\n')
        file.close()
        print('\nall done!')
        print('result is stored in ' + self.file2Process[0:-4] + '_Result.txt \n')

    # conver xyz to coordinate!
    def main(self):
        self.readFile()
        self.outputData()

if __name__=='__main__':

    test = xyz2Coordinate(*sys.argv)
    test.main()

