# -*- coding: utf-8 -*-
"""Description: 
This script read in .txt file generated by X-ray photoelectron spectroscopy
and revise all data according to the standard energy of Carbon (default is 284.6eV).
Finally all data after revising will be output in .txt file named with the atom types.

Usage: 
        $ python xpsProcess.py <filename> [standard Energy Of Carbon]

Args:
    filename (str): path to .txt file, define which file to process.
    standard Energy Of Carbon (float, optional): standard energy of Carbon for revise.

Output: 
    Several .txt file named with the concerned atom types, in which contains the revaised energy, 
    counts and the original energy.

code by zmzeng12 20180314
"""

import re
import sys

class xpsProcess(object):


    def __init__(self, py, file2Process, standardEnergyOfCarbon=284.6):
        """
        Args:
            file2Process (str): path to .txt file, define which file to process.
            standardEnergyOfCarbon (float, optional): standard energy of Carbon for revise.
        Attributes:
            self.file2Process (str): path to .txt file, define which file to process.
            self.standardEnergyOfCarbon (float): standard energy of Carbon for revise.
            self.atoms (str): atom type found in the .txt file.
            self.spectrum (list): list of spectrum for each atom.
            self.delta (float)ï¼šdifference between experiment and standard energy of Carbon.
        """

        welcome = '''
#######################################################

  X-ray photoelectron spectroscopy data process script  
                    code by zmzeng.
                       20180314

#######################################################
    '''
        print(welcome)
        self.file2Process = file2Process
        self.standardEnergyOfCarbon = float(standardEnergyOfCarbon)

        print('------>  ' + 'The file to process is ' + self.file2Process)
        print('------>  ' + 'The standard energy of C is set to ' + str(self.standardEnergyOfCarbon) +'\n')
        self.atoms = []
        self.spectrum = []
        self.delta = 0.0

    def readFile(self):
        file = open(self.file2Process, 'r')
        line = file.readline()
        while line:
            # every atom data is start with line with 'Region'
            if line.find('Region') != -1:
                line = self.getData(file)
            else:
                break
        file.close()
        print('------>  ' + 'Found atoms: '+ str(self.atoms[1:]) +'\n')

    def getData(self, file):
        line = file.readline()
        # use RegExr to match the atom type
        atom = re.search('false\s(.*?)\s7', line).group(1)
        self.atoms.append(atom)
        line = file.readline()
        line = file.readline()
        line = file.readline()
        line = file.readline()
        alldata = []
        # all atom experiment data are stored in self.spectrum
        while line.find('Region') == -1 and line:
            if line.find('Layer') != -1 :
                line = file.readline()
                line = file.readline()
                line = file.readline()
            data = [float(x) for x in line.split('\t')]
            alldata.append(data)
            line = file.readline()
        self.spectrum.append(alldata)
        return line
   
    def findDelta(self):
        """Find the energy of Carbon from experiment data. Compare the experiment value and the standard value
        to get the Delta for later data revising.

        Delta = Esignal - Estandard
        """
        temp = self.spectrum[self.atoms.index('C')]
        index = 0
        max = 0
        for i in range(0,len(temp)):
            if max < temp[i][1]:
                max = temp[i][1]
                index = i
            i += 1
        energyOfCarbon = temp[index][0]
        self.delta = energyOfCarbon - self.standardEnergyOfCarbon
        print('------>  ' + 'max position is ' + str(energyOfCarbon))
        print('------>  ' + 'delta is ' + str(self.delta) + '\n')

    def reviseData(self, data):
        """Revise data according to Delta.

        Estandard = Esignal - Delta"""
        return str(data[0]-self.delta) + '  ' + str(data[1]) + '  ' + str(data[0]) 

    def outputData(self):
        for i in range(0,len(self.atoms)):
            if self.atoms[i] == '':
                self.atoms[i] = 'whole spectrum'
            file = open(self.file2Process[0:-4] + '_' + self.atoms[i] + '_Result.txt', 'w')
            file.write(self.atoms[i] + ' generated by xpsProcess.exe\n')
            file.write('Energy(revised)  Counts  Energy\n')
            file.write('eV eV \n')
            file.write(self.atoms[i] + ' ' + self.atoms[i] + ' ' + self.atoms[i] + '\n')
            for data in self.spectrum[i]:
                file.write(self.reviseData(data) + '\n')
            file.close()

    def main(self):

        self.readFile()
        self.findDelta()
        self.outputData()

if __name__=='__main__':

    
    try:
        test = xpsProcess(*sys.argv)
    except TypeError:
        print('\n!!!!!!!!!!!!!!!!!')
        print("Something wrong with your input.")
        print(help_info)
        print('!!!!!!!!!!!!!!!!!\n')
        input('press Enter to quit.\n\n')
    else:
        try:
            test.main()
        except FileNotFoundError:
            print('\n!!!!!!!!!!!!!!!!!\n')
            print("Something wrong with your data file, Check filename.")
            print(help_info)
            print('!!!!!!!!!!!!!!!!!\n')
            input('Press Enter to quit.\n\n')
        except TypeError:
            print('\n!!!!!!!!!!!!!!!!!\n')
            print("Something wrong with the standard energy value of Carbon.")
            print(help_info)
            print('!!!!!!!!!!!!!!!!!\n')
            input('Press Enter to quit.\n\n')
        else:
            print('                    ###############')
            print('                    #  all done!  #' )
            print('                    ###############\n')
            print('Press Enter to quit.\n')
            standardEnergyOfCarbon = input('Or \n\nInput the standard energy of Carbon if it is *NOT* 284.6\n')
            if standardEnergyOfCarbon:
                print('\n')
                test = xpsProcess(*sys.argv, standardEnergyOfCarbon)
                test.main()


